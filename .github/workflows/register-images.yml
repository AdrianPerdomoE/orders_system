name: Publish Docker Images and Compose File

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: Build # Define el entorno
    steps:
      # Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v4

      # Loguearse en GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
      # Generar el archivo init-mongo.js
      - name: Generate init-mongo.js
        run: |
          echo "Generating init-mongo.js..."
          cat <<EOF > ./mongoDB/init-mongo.js
          db = db.getSiblingDB('admin');
          if (db.system.users.find({ user: ${{secrets.USERNAME}} }).count() === 0) {

            db.createUser({
              user: ${{ secrets.USERNAME }},
              pwd: ${{ secrets.MONGO_PASSWORD }},
              roles: [
                { role: "readWrite", db: ${{secrets.DATABASE}} },
                { role: "dbAdmin", db:  ${{secrets.DATABASE}} }
              ]
            });
            
          } else {

            db.updateUser("Admin", {
              roles: [
                { role: "readWrite", db:  ${{secrets.DATABASE}} },
                { role: "dbAdmin", db:  ${{secrets.DATABASE}} }
              ]
            });
          
          }


          db = db.getSiblingDB( ${{secrets.DATABASE}});


          if (!db.getCollectionNames().includes("products")) {
            db.createCollection("products");
            print("Collection 'products' created.");
          }

          if (!db.getCollectionNames().includes("orders")) {
            db.createCollection("orders");
            print("Collection 'orders' created.");
          }

          if (!db.getCollectionNames().includes("users")) {
            db.createCollection("users");
            print("Collection 'users' created.");
          }

          print("Database  ${{secrets.DATABASE}} initialized successfully.");
          EOF



      # Construir y subir todas las im√°genes usando Docker Compose
      - name: Build and Push Images
        run: |
          docker compose build --build-arg SECRET_KEY=${{ secrets.SECRET_KEY }} \
                               --build-arg MONGO_URI=${{ secrets.MONGO_URI }} \
                               --build-arg REDIS_HOST=${{ secrets.REDIS_HOST }} \
                               --build-arg REDIS_PORT=${{ secrets.REDIS_PORT }} \
                               --build-arg REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
                               --build-arg DOCKER_ENV=${{ secrets.DOCKER_ENV }} \
                               --build-arg DATABASE=${{ secrets.DATABASE }} \
                               --build-arg MONGO_USERNAME=${{ secrets.USERNAME }} \
                               --build-arg MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}
          docker compose push

      # Generar el archivo docker-compose.yml limpio
      - name: Generate docker-compose.yml
        run: |
          cat <<EOF > docker-compose.yml
          version: '3.8'
      
          services:
            app:
              image: ghcr.io/adrianperdomoe/orders_system/app:latest
              depends_on:
                - mongodb
                - redis
              container_name: app
              ports:
                - "8080:8080"
      
            mongodb:
              image: ghcr.io/adrianperdomoe/orders_system/mongodb:latest
              volumes:
                - mongo-data:/data/db
              restart: always
              container_name: mongodb
              ports:
                - "27017:27017"
      
            redis:
              image: ghcr.io/adrianperdomoe/orders_system/redis:latest
              container_name: redis
              ports:
                - "6379:6379"
      
          volumes:
            mongo-data:
          EOF

      # Subir el archivo docker-compose.yml como artefacto
      - name: Upload docker-compose.yml
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose
          path: docker-compose.yml

       # Generar un tag basado en la fecha
      - name: Generate date-based tag
        id: date_tag
        run: echo "tag=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
      # Crear un release y adjuntar el archivo docker-compose.yml
      - name: Create Release
        uses: ncipollo/release-action@v1.16.0
        with:
          token: ${{ secrets.GHCR_PAT }}
          tag: docker-compose-${{ env.tag }}
          name: Docker Compose Release
          allowUpdates: true
          artifacts: "docker-compose.yml"
          body: |
            This release contains the `docker-compose.yml` file for the project.

            To use this file, download it and run the following command:

            ```bash
            docker-compose up
            ```